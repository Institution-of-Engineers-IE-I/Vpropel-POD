/*

Irregular Triangular Wave
Given ‘n’ integers, rearrange them to be points (points to be considered are shown in blue colour) of a irregular triangular wave as shown below with minimum number of swaps.


Irregular Triangular Wave
 

For example if seven points 4, 3, 7, 8, 6, 2, 1 are given then they are rearranged to be points of irregular triangular 
wave as 3, 7, 4, 8, 2, 6, 1 with minimum swaps.
Input Format
First line contains the number of integers, n
Next line contain the integers separated by a space
Output Format
Print the rearranged integers

*/


******* METHOD-1 C CODE *******

// KUNAL SINGH   20BCE0449
#include<stdio.h>

int main()
{
    int n, i, j, k, temp;
    scanf("%d", &n);
    
    int arr[n];
    for(i=0 ; i<n ; i++)
    {
        scanf("%d", &arr[i]);
    }
    for(i=0 ; i<n-1 ; i++)
    {
        if(i%2==0)
        {
            if(arr[i]>arr[i+1])
            {
                temp = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = temp;
            }
        }
        if(i%2==1)
        {
            if(arr[i]<arr[i+1])
            {
                temp = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = temp;
            }
        }
    }
    for(i=0 ; i<n ; i++)
    {
        printf("%d ", arr[i]);
    }
}


******* METHOD-2 PYTHON CODE *******

#KUNAL SINGH  20BCE0449

n = int(input())
l = list(map(int, input().split()))

for i in range(n-1):
    if(i%2==0):
        if(l[i]>l[i+1]):
            temp = l[i]
            l[i] = l[i+1]
            l[i+1] = temp
    elif(i%2==1):
        if(l[i]<l[i+1]):
            temp = l[i]
            l[i] = l[i+1]
            l[i+1] = temp       

for i in range(n):
    print(l[i], end=" ")
