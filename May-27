/*

Move the Belt to Maximize Efficiency
A robot is built for company to fit nuts of some size ‘s’ with bolts of same size ‘s’. The sizes of the nuts and bolts are represented by letters ‘a’ to ‘z’. The nuts and bolts are arranged on either side of a conveyor belt which looks as below:


The belts on either side moves in opposite directions. The sizes of the nuts and bolts are read in the direction of movement of the belt on which they are placed.

An operation gives its maximum efficiency only when maximum number of nuts are bolts are involved. Re-orient operation works with consecutive nuts and consecutive bolts and it identifies the position of the first nut and position of the frist bolt that can be fitted to give maximum efficiency.

Given the sizes of the nuts and sizes of the bolts arranged in the conveyor belt, write a C++ program to help the re-orient operation such that it gives the first position of the consecutive nuts that can be fitted with maximum number of bolts.

For example, if the sizes of the nuts are swabcdefgty and sizes of the bolts are vbnedcvbws, then three nuts of size ‘cde’ at position 5 can be fitted with three bolts in position 6.

Input Format

First line contains the sizes of the nuts

Second line contains the sizes of the bolts

Output Format

Print line contains the maximum number of nuts and bolts that can be fitted

Next line contains the position of the first nut that can be fitted

Next line contains the position of the first bolt that can be fitted

*/





******* METHOD-1 C CODE *******

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int main()
{
    int i, j, k, l1, l2, i1, j1, count=0, max=0, ans1=0, ans2=0;
    char s1[101], s2[101], s3[101];
    scanf("%s%s", s1, s3);

    l1 = strlen(s1);
    l2 = strlen(s3);
    
    for(i=0 ; i<l2 ; i++)
    {
        s2[l2-1-i] = s3[i];
    }
    
    for(i=0 ; i<l1 ; i++)
    {
        for(j=0 ; j<l2 ; j++)
        {
            if(s1[i]==s2[j])
            {
                i1=i;
                j1=j;
                count=1;
                i++;
                j++;
                while(i<l1 || j<l2)
                {
                    if(s1[i]==s2[j])
                    {
                        count++;
                        if(count>max)
                        {
                            max = count;
                            ans1 = i1+1;
                            ans2 = l2-j1;
                        }
                    }
                    else if(s1[i]!=s2[j])
                    {
                        count=0;
                        break;
                    }
                    i++;
                    j++;
                }
            }
        }
    }
    printf("%d\n%d\n%d", max, ans1, ans2);
    return 0;
}



******* METHOD-2 PYTHON CODE *******

# KUNAL SINGH   20BCE0449
s1 = input()
s = input()
s2 = s[::-1]

l1 = len(s1)
l2 = len(s2)
maxs=0
flag=0

for i in range(l1):
    for j in range(l2):
        if s1[i]==s2[j]:
            i1 = i
            j1 = j
            count = 1
            i2 = i1+1
            j2 = j1+1
            while(i2<l1 and j2<l2):
                if(s1[i2]==s2[j2]):
                    count += 1
                    if(count>maxs):
                        maxs = count
                        ans1 = i1+1
                        ans2 = l2-j1
                elif(s1[i2]!=s2[j2]):
                    count = 0
                    break
                i2 += 1
                j2 += 1
                
print(maxs)
print(ans1)
print(ans2)
